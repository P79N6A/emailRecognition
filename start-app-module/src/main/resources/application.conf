mongo {
  uri = "mongodb://localhost"
  dbName = "emails"
}

coordinator-failure-backoff = 5 s
akka {
  extensions = ["akka.cluster.ddata.DistributedData"]

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-config-on-start = off
  loglevel = "DEBUG"
  stdout-loglevel = "OFF"

  debug {
    lifecycle = on
  }
  event-processing-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 2
    }
    throughput = 1
  }

  actor {
    debug {
      receive = on
      lifecycle = on
    }
    provider = "cluster"


  }

  remote {
    artery {
      enabled = on
      transport = aeron-udp
      canonical.hostname = "127.0.0.1"
      canonical.port = 2550
    }
  }

  cluster {
    #seed-nodes = ["akka.tcp://application@127.0.0.1:2550", "akka.tcp://application@127.0.0.1:2551"]
    seed-nodes = ["akka://application@127.0.0.1:2550"]
    distributed-data {
      durable.keys = ["TimeShiftOffset"]
      delta-crdt.enabled = off
    }
    allow-local-routees = on

  }

  http {
    server.parsing.illegal-header-warnings = off
    client.parsing.illegal-header-warnings = off
  }
}

akkaHttp {
  cifPublic {
    default = true
    protocol = "http"
    interface = "0.0.0.0"
    port = 9000
    routes = ["cifCommon", "codelist", "addressApprovalTrulioo", "addressApproval"]
  }
}
